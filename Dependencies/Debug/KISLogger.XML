<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KISLogger</name>
    </assembly>
    <members>
        <member name="T:KISLogger.ConstantValues">
            <summary>
            A static class listing various constant values used by the library.
            </summary>
        </member>
        <member name="F:KISLogger.ConstantValues.DefaultEncoding">
            <summary>
            Gets the default encoding used by <see cref="T:KISLogger.Output.ISimpleLoggerOutput`1"/> implementations.
            </summary>
        </member>
        <member name="F:KISLogger.ConstantValues.DEFAULT_FILE_EXTENSION">
            <summary>
            Gets the default file extension used by <see cref="T:KISLogger.Output.ISimpleLoggerOutput`1"/> 
            implementations that write to files on the file system.
            </summary>
        </member>
        <member name="T:KISLogger.ExceptionLogger`1">
            <summary>
            A class used to log exceptions to an arbitrary output target.
            </summary>
            <typeparam name="T">Type of the output target.</typeparam>
        </member>
        <member name="M:KISLogger.ExceptionLogger`1.#ctor(KISLogger.Output.ISimpleLoggerOutput{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.ExceptionLogger`1" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.ExceptionLogger`1.#ctor(KISLogger.Output.IAsyncLoggerOutput{`0})">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.ExceptionLogger`1.#ctor(KISLogger.Output.ILoggerOutput{`0})">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.ExceptionLogger`1.Log(System.Exception,`0,System.String,KISLogger.Format.ILogFormat{System.Exception})">
            <summary>
            Logs the given object to the given output target, adding an optional additional message,
            and applying a custom format.                
            </summary>
            <param name="i_ExceptionToLog">Object to log.</param>
            <param name="i_OutputTarget">Log's output target, which could be a file, a stream, etc.</param>
            <param name="i_AdditionalMessage">An additional message to append to the log message.</param>
            <param name="i_LogFormat">Reference to a formatter used to apply a custom format on the log message.
                If none is given, the default one is used.</param>
        </member>
        <member name="M:KISLogger.ExceptionLogger`1.LogAsync(System.Exception,`0,System.String,KISLogger.Format.ILogFormat{System.Exception})">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.ExceptionLogger`1.SimpleLoggerOutput">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:KISLogger.ExceptionLogger`1.AsyncLoggerOutput">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.ExceptionLogger`1.MessageBuilder">
            <inheritdoc />
        </member>
        <member name="T:KISLogger.Factory.DiagnosticsFactory">
            <summary>
            A class used as a factory to create concrete <see cref="T:System.Diagnostics.StackTrace"/> objects.
            </summary>
        </member>
        <member name="M:KISLogger.Factory.DiagnosticsFactory.MakeStackTrace(System.Exception,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:KISLogger.Factory.IDiagnosticsFactory">
            <summary>
            An interface declaring methods to create diagnostics-related concrete types.
            </summary>
        </member>
        <member name="M:KISLogger.Factory.IDiagnosticsFactory.MakeStackTrace(System.Exception,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Diagnostics.StackTrace"/> object based on the given parameters.
            </summary>
            <param name="i_WrappedException">Reference to the exception 
            that the StackTrace will wrap.</param>
            <param name="i_IsFileInfoRequired">Boolean value indicating weather 
            the file info of the wrapped exception is required.</param>
            <returns>Reference to the created StackTrace object.</returns>
        </member>
        <member name="T:KISLogger.Factory.LoggerFactory">
            <summary>
            A static factory class providing methods to create instances of various loggers, 
            using a factory model. <br />
            The factory tries to optimize memory by using caching techniques as much as possible.
            </summary>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.#cctor">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeLoggerOutput``1(System.Text.Encoding)">
            <summary>
            Makes a <see cref="T:KISLogger.Output.ILoggerOutput`1"/> object based on the given encoding. <br />
            The method looks through the defined concrete classes implementing the interface 
            to match the given type, and returns a possibly-cached instance of it. 
            If no match is found, null is returned.
            </summary>
            <remarks>
            Use this method to get an instance of a complete implementation for some target type, 
            to avoid the overhead of redefinition.
            <para>
            For example: The library defines an implementation for the <see cref="T:System.String"/> type, 
            treating it as a file path which the log message should be written to. <br />
            </para>
            <br />
            <para>
            This method attempts to apply memoization techniques as much as possible 
            to increase performance by avoiding the overhead 
            of object creation for the same encoding. <br />
            After an instance has been firstly created, each call to this method with the same 
            encoding will return the cached instance, yet a different encoding will create 
            a new instance.
            </para>
            </remarks>
            <typeparam name="T">Type of the logger's output target.</typeparam>
            <param name="i_Encoding">Encoding to use in the log process. 
            Affects caching behavior.</param>
            <returns>Reference to the created/retrieved object matching the given type, 
            or null if no such instance could be generated.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeFileLoggerOutput(System.Text.Encoding)">
            <summary>
            Makes a <see cref="T:KISLogger.Output.FileLoggerOutput"/> object based on the given encoding.
            </summary>
            <param name="i_Encoding">Encoding to use ing the log process.</param>
            <returns>Reference to the logger output object.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeStreamLoggerOutput(System.Text.Encoding)">
            <summary>
            Makes a <see cref="T:KISLogger.Output.StreamLoggerOutput"/> object based on the given encoding.
            </summary>
            <param name="i_Encoding">Encoding to use ing the log process.</param>
            <returns>Reference to the logger output object.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeLogger``2(System.Text.Encoding)">
            <summary>
            Makes a <see cref="T:KISLogger.ILogger`2"/> object based on the given 
            log data type, output target type and encoding to use when logging. <br />
            This method assumes the given types have a built-in concrete implementation 
            of the interface, otherwise it returns null.
            </summary>
            <typeparam name="TLog">Type of the data to log.</typeparam>
            <typeparam name="TOutput">Type of the output target.</typeparam>
            <param name="i_Encoding">Encoding to use in the log process.</param>
            <returns>Reference to the created logger instance, or null if no concrete
            built-in implementation has been found.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeConsoleTextLogger">
            <summary>
            Make a <see cref="T:KISLogger.TextLogger`1"/> object for <see cref="T:System.Console"/> output.
            </summary>
            <returns>Reference to the created text logger object.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.MakeConsoleExceptionLogger">
            <summary>
            Make a <see cref="T:KISLogger.ExceptionLogger`1"/> object for <see cref="T:System.Console"/> output.
            </summary>
            <returns>Reference to the created exception logger object.</returns>
        </member>
        <member name="M:KISLogger.Factory.LoggerFactory.InvalidateCache">
            <summary>
            Invalidates the cache by deleting all existing fields' references. <br />
            Internal method used only for testing purposes.
            </summary>
        </member>
        <member name="T:KISLogger.Format.ConstantValues">
            <summary>
            A static class listing various constant values related to the logger.
            </summary>
        </member>
        <member name="T:KISLogger.Format.DateTimeFormat`1">
            <summary>
            A class used to format log messages using a date time on top, message in the bottom.
            </summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeFormat`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeFormat`1.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeFormat`1.Format(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="T:KISLogger.Format.DateTimeWithSeparatorFormat`1">
            <summary>
            A class used to format log messages using a date time on top, message in the middle,
            and a separating-line at the bottom.
            </summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeWithSeparatorFormat`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeWithSeparatorFormat`1.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeWithSeparatorFormat`1.#ctor(System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeWithSeparatorFormat`1.#ctor(System.Char,System.Int32,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:KISLogger.Format.DateTimeWithSeparatorFormat`1.Format(`0,System.String)">
            <summary>
            Formats the given log message according to the implementation-specific format constraints.
            </summary>
            <param name="i_LoggedObject">Log's message to format.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="T:KISLogger.Format.ExceptionFormat">
            <summary>
            A class used to format exceptions using the exception's 
            message and stack trace, and an additional optional message.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Format.ExceptionFormat" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionFormat.Format(System.Exception,System.String)">
            <summary>
            Formats the given log message according to the implementation-specific format constraints.
            </summary>
            <param name="i_LoggedObject">Reference to an object to format.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="M:KISLogger.Format.ExceptionFormat.BuildBasicExceptionInfo(System.Text.StringBuilder@,System.Exception)">
            <summary>
            Builds a string encapsulating some basic exception information, 
            such as its' concrete type and inner message.
            </summary>
            <param name="i_StringBuilder">Full referene to a StringBuilder object.</param>
            <param name="i_LoggedException">Reference to the logged exception.</param>
        </member>
        <member name="M:KISLogger.Format.ExceptionFormat.BuildAdvancedExceptionInfo(System.Text.StringBuilder@,System.Diagnostics.StackTrace)">
            <summary>
            Builds a string encapsulating some advanced exception information, 
            taken mostly from its' <see cref="T:System.Diagnostics.StackTrace"/>.
            <para />
            The info includes the file name at which the exception occurred, 
            the method name, the line number and the column number.
            </summary>
            <param name="i_StringBuilder">Full referene to a StringBuilder object.</param>
            <param name="i_ExceptionStackTrace">Reference to the StackTrace object 
            wrapped around the logged exception.</param>
        </member>
        <member name="T:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat">
            <summary>
            A class used to format exceptions using the current date time on top,
            exception's message and stack trace in the middle, an additional optional message in the bottom,
            and a separator line underneath them all.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory,System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory,System.Char,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeAndSeparatorFormat.Format(System.Exception,System.String)">
            <summary>
            Formats the given exception according to the implementation-specific format constraints.
            </summary>
            <param name="i_LoggedObject">Exception object to format.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="T:KISLogger.Format.ExceptionWithDateTimeFormat">
            <summary>
            A class used to format exceptions using the current date time on top,
            exception's message and stack trace in the middle, and an additional optional message in the bottom.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory)">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeFormat.#ctor(KISLogger.Factory.IDiagnosticsFactory,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.Format.ExceptionWithDateTimeFormat.Format(System.Exception,System.String)">
            <summary>
            Formats the given exception according to the implementation-specific format constraints.
            </summary>
            <param name="i_LoggedObject">Exception object to format.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="T:KISLogger.Format.ILogFormat`1">
            <summary>
            An interface declaring methods to specify a format for the log message.
            </summary>
            <typeparam name="TFormatted">Type of the formatted object.</typeparam>
        </member>
        <member name="M:KISLogger.Format.ILogFormat`1.Format(`0,System.String)">
            <summary>
            Formats the given log message according to the implementation-specific format constraints.
            </summary>
            <param name="i_LoggedObject">Reference to an object to format.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="T:KISLogger.Format.ILogMessageBuilder">
            <summary>
            An interface declaring methods to wrap the <see cref="T:KISLogger.Format.ILogFormat`1"/> interface, 
            providing wrapper methods for all concrete types implementing it.
            </summary>
        </member>
        <member name="M:KISLogger.Format.ILogMessageBuilder.BuildMessage(System.String,System.String)">
            <summary>
            Builds a log message based on the given parameters.
            </summary>
            <param name="i_MessageToLog">Log message's inner message.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log object.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="M:KISLogger.Format.ILogMessageBuilder.BuildMessage(System.Exception,System.String)">
            <summary>
            Builds a log message based on the given parameters.
            </summary>
            <param name="i_ExceptionToLog">Exception to build the log message on.</param>
            <param name="i_AdditionalMessage">Additional message to append to the log object.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="P:KISLogger.Format.ILogMessageBuilder.StringLogFormat">
            <summary>
            Gets or sets the format to use on logged <see cref="T:System.String"/> objects.
            </summary>
        </member>
        <member name="P:KISLogger.Format.ILogMessageBuilder.ExceptionLogFormat">
            <summary>
            Gets or sets the format to use on logged <see cref="T:System.Exception"/> objects.
            </summary>
        </member>
        <member name="T:KISLogger.Format.LogMessageBuilder">
            <summary>
            A static class used to build log messages using a variable format.
            </summary>
        </member>
        <member name="M:KISLogger.Format.LogMessageBuilder.#ctor">
            <summary>
            Initializes the static class by assigning a default log formatter.
            </summary>
        </member>
        <member name="M:KISLogger.Format.LogMessageBuilder.BuildMessage(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.Format.LogMessageBuilder.BuildMessage(System.Exception,System.String)">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.Format.LogMessageBuilder.StringLogFormat">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.Format.LogMessageBuilder.ExceptionLogFormat">
            <inheritdoc />
        </member>
        <member name="T:KISLogger.IAsyncLogger`2">
            <summary>
            An interface declaring methods to log data of any type 
            to an output target of any type. <br />
            In this interface it is done asynchronously.
            </summary>
            <typeparam name="TLog">Type of the object to log.</typeparam>
            <typeparam name="TOutput">Type of the log's output target.</typeparam>
        </member>
        <member name="M:KISLogger.IAsyncLogger`2.LogAsync(`0,`1,System.String,KISLogger.Format.ILogFormat{`0})">
            <summary>
            Logs the given object to the given output target, adding an optional additional message,
            and applying a custom format. <br />
            It is done in an asynchronous manner.
            </summary>
            <param name="i_ObjectToLog">Object to log.</param>
            <param name="i_OutputTarget">Log's output target, which could be a file, a stream, etc.</param>
            <param name="i_AdditionalMessage">An additional message to append to the log message.</param>
            <param name="i_LogFormat">Reference to a formatter used to apply a custom format on the log message.
                If none is given, the default one is used.</param>
        </member>
        <member name="P:KISLogger.IAsyncLogger`2.AsyncLoggerOutput">
            <summary>
            Gets or sets a reference to an object used to interact with the system 
            to perform the actual log operation. This object does it asynchronously.
            </summary>
        </member>
        <member name="T:KISLogger.ILogger`2">
            <summary>
            A wrapper interface providing methods to log data of any type 
            to an output target of any type, either synchronously ("Simple") or asynchronously. <br />
            This is utterly the most recommended interface to use, out of all available 
            logger interfaces out there.
            </summary>
            <typeparam name="TLog">Type of the data to log.</typeparam>
            <typeparam name="TOutput">Type of the output target.</typeparam>
        </member>
        <member name="T:KISLogger.ILoggerBase`1">
            <summary>
            A base interface declaring properties essential to the logging process. <br />
            As this is a *Base* interface, it should only be inherited by other interfaces, 
            whereas the concrete types should be implemented instead.
            </summary>
            <typeparam name="TOutput">Type of the log's output target.</typeparam>
        </member>
        <member name="P:KISLogger.ILoggerBase`1.MessageBuilder">
            <summary>
            Gets or sets a reference to a message builder, used as the default builder 
            if a custom format hasn't been provided.
            </summary>
        </member>
        <member name="T:KISLogger.ISimpleLogger`2">
            <summary>
            An interface declaring methods to log data of any type 
            to an output target of any type. <br />
            In this interface it is done synchronously, thus named "Simple".
            </summary>
            <typeparam name="TLog">Type of the object to log.</typeparam>
            <typeparam name="TOutput">Type of the log's output target.</typeparam>
        </member>
        <member name="M:KISLogger.ISimpleLogger`2.Log(`0,`1,System.String,KISLogger.Format.ILogFormat{`0})">
            <summary>
            Logs the given object to the given output target, 
            adding an optional additional message,and applying a custom format.                
            </summary>
            <param name="i_ObjectToLog">Object to log.</param>
            <param name="i_OutputTarget">Log's output target, 
            which could be a file, a stream, etc.</param>
            <param name="i_AdditionalMessage">
            An additional message to append to the log message.</param>
            <param name="i_LogFormat">
            Reference to a formatter used to apply a custom format on the log message.
            If none is given, the default one is used.</param>
        </member>
        <member name="P:KISLogger.ISimpleLogger`2.SimpleLoggerOutput">
            <summary>
            Gets or sets a reference to an object used to interact with the system 
            to perform the actual log operation.
            </summary>
        </member>
        <member name="T:KISLogger.Log">
            <summary>
            A static utility class providing methods that wrap internal built-in loggers 
            for easy-to-use logging purposes.
            </summary>
        </member>
        <member name="M:KISLogger.Log.LogText(System.String)">
            <summary>
            Logs the given text to the console.
            </summary>
            <param name="i_TextToLog">String representing the text to log.</param>
        </member>
        <member name="M:KISLogger.Log.LogText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Logs the given text to the given file on the file system.
            </summary>
            <param name="i_TextToLog">String representing the text to log.</param>
            <param name="i_OutputFilePath">Path of the file to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Logs the given text to the given file on the file system asynchronously.
            </summary>
            <param name="i_TextToLog">String representing the text to log.</param>
            <param name="i_OutputFilePath">Path of the file to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogText(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Logs the given text to the given stream object.
            </summary>
            <param name="i_TextToLog">String representing the text to log.</param>
            <param name="i_OutputStream">Reference to a stream to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogTextAsync(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Logs the given text to the given stream object asynchronously.
            </summary>
            <param name="i_TextToLog">String representing the text to log.</param>
            <param name="i_OutputStream">Reference to a stream to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogException(System.Exception)">
            <summary>
            Logs the given exception to the console.
            </summary>
            <param name="i_Exception">Exception to be logged.</param>
        </member>
        <member name="M:KISLogger.Log.LogException(System.Exception,System.String,System.Text.Encoding)">
            <summary>
            Logs the given exception to the given file on the file system.
            </summary>
            <param name="i_ExceptionToLog">Exception to be logged.</param>
            <param name="i_OutputFilePath">Path of the file to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogExceptionAsync(System.Exception,System.String,System.Text.Encoding)">
            <summary>
            Logs the given exception to the given file on the file system asynchronously.
            </summary>
            <param name="i_ExceptionToLog">Exception to be logged.</param>
            <param name="i_OutputFilePath">Path of the file to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogException(System.Exception,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Logs the given exception to the given stream object.
            </summary>
            <param name="i_ExceptionToLog">Exception to be logged.</param>
            <param name="i_OutputStream">Reference to a stream to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="M:KISLogger.Log.LogExceptionAsync(System.Exception,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Logs the given exception to the given stream object asynchronously.
            </summary>
            <param name="i_ExceptionToLog">Exception to be logged.</param>
            <param name="i_OutputStream">Reference to a stream to output the log to.</param>
            <param name="i_Encoding"></param>
        </member>
        <member name="T:KISLogger.Output.ConsoleLoggerOutput">
            <summary>
            A class used to output log messages to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:KISLogger.Output.ConsoleLoggerOutput.OutputLog(System.String,KISBase.NullObject)">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.Output.ConsoleLoggerOutput.EncodingToUse">
            <inheritdoc />
        </member>
        <member name="T:KISLogger.Output.FileLoggerOutput">
            <summary>
            A class used to log messages to raw files on the file system.
            </summary>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Output.FileLoggerOutput" /> class.
            </summary>
            <param name="i_Encoding">Encoding to use on output.</param>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Output.FileLoggerOutput" /> class.
            </summary>
            <param name="i_DefaultExtension">Extension of the log file to apply if none has been passed.</param>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Output.FileLoggerOutput" /> class.
            </summary>
            <param name="i_DefaultExtension">Extension of the log file to apply if none has been passed.</param>
            /// <param name="i_Encoding">Encoding to use on output.</param>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.OutputLog(System.String,System.String)">
            <summary>
            Interacts with the system using the given output target, 
            while using the given log message a parameter.
            </summary>
            <param name="i_LogMessage">Log's fully constructed message, including all wrapping formats.</param>
            <param name="i_OutputTarget">Some output target for the log message, 
            possibly a stream or a file's path.</param>
        </member>
        <member name="M:KISLogger.Output.FileLoggerOutput.OutputLogAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.Output.FileLoggerOutput.EncodingToUse">
            <summary>
            Gets or sets the encoding used to output the log message.
            </summary>
        </member>
        <member name="P:KISLogger.Output.FileLoggerOutput.DefaultExtension">
            <summary>
            Gets or sets the default extension to append to the logged file, 
            in case none was provided as part of the file's path.
            </summary>
        </member>
        <member name="T:KISLogger.Output.IAsyncLoggerOutput`1">
            <summary>
            An interface declaring methods to interact with 3rd party components, 
            such as the file system or a DB. <br />
            Interaction is done asynchronously.
            </summary>
            <typeparam name="T">Type of the output target.</typeparam>
        </member>
        <member name="M:KISLogger.Output.IAsyncLoggerOutput`1.OutputLogAsync(System.String,`0)">
            <summary>
            Interacts with the system using the given output target, 
            while using the given log message a parameter. <br />
            This operation is done asynchronously.
            </summary>
            <param name="i_LogMessage">Log's fully constructed message, including all wrapping formats.</param>
            <param name="i_OutputTarget">Some output target for the log message, 
            usually a stream or a file's path.</param>
        </member>
        <member name="T:KISLogger.Output.ILoggerOutput`1">
            <summary>
            A wrapper interface providing methods to log a message to an output target of some type, 
            either synchronously ("Simple") or asynchronously. <br />
            This is utterly the most recommended interface to use, out of all available 
            logger output interfaces out there.
            </summary>
            <typeparam name="T">Type of the output target.</typeparam>
        </member>
        <member name="T:KISLogger.Output.ILoggerOutputBase">
            <summary>
            A base interface declaring properties essential for the output process. <br />
            As this is a *Base* interface, it should only be inherited by other interfaces, 
            whereas the concrete types should be implemented instead.
            </summary>
        </member>
        <member name="P:KISLogger.Output.ILoggerOutputBase.EncodingToUse">
            <summary>
            Gets or sets the encoding used to output the log message.
            </summary>
        </member>
        <member name="T:KISLogger.Output.ISimpleLoggerOutput`1">
            <summary>
            An interface declaring methods to log messages to an output target of some type. <br />
            Methods defined in this interface do this synchronously, thus named "Simple".
            </summary>
            <typeparam name="T">Type of the output target.</typeparam>
        </member>
        <member name="M:KISLogger.Output.ISimpleLoggerOutput`1.OutputLog(System.String,`0)">
            <summary>
            Interacts with the system using the given output target, 
            while using the given log message a parameter.
            </summary>
            <param name="i_LogMessage">Log's fully constructed message, including all wrapping formats.</param>
            <param name="i_OutputTarget">Some output target for the log message, 
            usually a stream or a file's path.</param>
        </member>
        <member name="T:KISLogger.Output.StreamLoggerOutput">
            <summary>
            A class used to output log messages to stream objects.
            </summary>
        </member>
        <member name="M:KISLogger.Output.StreamLoggerOutput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Output.StreamLoggerOutput" /> class.
            </summary>
        </member>
        <member name="M:KISLogger.Output.StreamLoggerOutput.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:KISLogger.Output.StreamLoggerOutput" /> class.
            </summary>
            <param name="i_Encoding">Encoding to use on output.</param>
        </member>
        <member name="M:KISLogger.Output.StreamLoggerOutput.OutputLog(System.String,System.IO.Stream)">
            <summary>
            Interacts with the system using the given output target, 
            while using the given log message a parameter.
            </summary>
            <param name="i_LogMessage">Log's fully constructed message, including all wrapping formats.</param>
            <param name="i_OutputTarget">Some output target for the log message, 
            possibly a stream or a file's path.</param>
        </member>
        <member name="M:KISLogger.Output.StreamLoggerOutput.OutputLogAsync(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.Output.StreamLoggerOutput.EncodingToUse">
            <summary>
            Gets or sets the encoding used to output the log message.
            </summary>
        </member>
        <member name="T:KISLogger.TextLogger`1">
            <summary>
            A class used to log some text to an arbitrary output target.
            </summary>
            <typeparam name="T">Type of the output target.</typeparam>
        </member>
        <member name="M:KISLogger.TextLogger`1.#ctor(KISLogger.Output.ISimpleLoggerOutput{`0})">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:KISLogger.TextLogger`1.#ctor(KISLogger.Output.IAsyncLoggerOutput{`0})">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.TextLogger`1.#ctor(KISLogger.Output.ILoggerOutput{`0})">
            <inheritdoc />
        </member>
        <member name="M:KISLogger.TextLogger`1.Log(System.String,`0,System.String,KISLogger.Format.ILogFormat{System.String})">
            <summary>
            Logs the given object to the given output target, adding an optional additional message,
            and applying a custom format.                
            </summary>
            <param name="i_MessageToLog">Object to log.</param>
            <param name="i_OutputTarget">Log's output target, which could be 
            a file, a stream, etc.</param>
            <param name="i_AdditionalMessage">An additional message to append 
            to the log message.</param>
            <param name="i_LogFormat">Reference to a formatter used to apply 
            a custom format on the log message.
            If none is given, the default one is used.</param>
        </member>
        <member name="M:KISLogger.TextLogger`1.LogAsync(System.String,`0,System.String,KISLogger.Format.ILogFormat{System.String})">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.TextLogger`1.SimpleLoggerOutput">
            <summary>
            An object used to interact with the system to perform the actual log operation.
            </summary>
        </member>
        <member name="P:KISLogger.TextLogger`1.AsyncLoggerOutput">
            <inheritdoc />
        </member>
        <member name="P:KISLogger.TextLogger`1.MessageBuilder">
            <inheritdoc />
        </member>
    </members>
</doc>
